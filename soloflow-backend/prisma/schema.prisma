// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./workflow.db"
}

// Enums

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum StepType {
  INPUT
  APPROVAL
  UPLOAD
  REVIEW
  SIGNATURE
}

enum ProcessStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum StepExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  SKIPPED
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  EMAIL
  CPF
  CNPJ
  PHONE
  DROPDOWN
  CHECKBOX
  TEXTAREA
  CURRENCY
  FILE
}

// Models

model Company {
  id                String           @id @default(uuid())
  name              String           @unique
  cnpj              String           @unique
  email             String?
  phone             String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relações
  userCompanies     UserCompany[]
  sectors           Sector[]
  processTypes      ProcessType[]
  processInstances  ProcessInstance[]

  @@map("companies")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relações
  userCompanies    UserCompany[]
  createdProcesses ProcessInstance[]
  executedSteps    StepExecution[]
  assignedSteps    Step[]           @relation("StepAssignedToUser")

  @@map("users")
}

model UserCompany {
  id              String     @id @default(uuid())
  role            UserRole   @default(USER)
  isDefault       Boolean    @default(false)
  lastAccessedAt  DateTime   @default(now())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  userId    String
  user      User      @relation(fields: [userId], references: [id])

  companyId String
  company   Company   @relation(fields: [companyId], references: [id])

  sectorId  String?
  sector    Sector?   @relation(fields: [sectorId], references: [id])

  @@unique([userId, companyId])
  @@map("user_companies")
}

model Sector {
  id             String           @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  companyId      String
  company        Company          @relation(fields: [companyId], references: [id])

  userCompanies  UserCompany[]
  assignedSteps  Step[]           @relation("StepAssignedToSector")
  stepExecutions StepExecution[]

  @@unique([companyId, name])
  @@map("sectors")
}

model ProcessType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  companyId    String
  company      Company        @relation(fields: [companyId], references: [id])

  steps        Step[]
  formFields   FormField[]
  instances    ProcessInstance[]

  @@unique([companyId, name])
  @@map("process_types")
}

model FormField {
  id            String    @id @default(uuid())
  name          String
  label         String
  type          FieldType
  placeholder   String?
  required      Boolean   @default(false)
  order         Int
  options       Json?
  validations   Json?
  defaultValue  String?
  helpText      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  processTypeId String
  processType   ProcessType @relation(fields: [processTypeId], references: [id], onDelete: Cascade)

  @@unique([processTypeId, order])
  @@map("form_fields")
}

model Step {
  id                String     @id @default(uuid())
  name              String
  description       String?
  type              StepType   @default(INPUT)
  order             Int
  allowAttachment   Boolean    @default(false)
  requiresSignature Boolean    @default(false)
  requireAttachment Boolean    @default(false)
  minAttachments    Int?
  maxAttachments    Int?
  allowedFileTypes  Json?
  actions           Json       @default("[]")
  conditions        Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  processTypeId     String
  processType       ProcessType @relation(fields: [processTypeId], references: [id], onDelete: Cascade)

  assignedToUserId   String?
  assignedToUser     User?     @relation("StepAssignedToUser", fields: [assignedToUserId], references: [id])

  assignedToSectorId String?
  assignedToSector   Sector?   @relation("StepAssignedToSector", fields: [assignedToSectorId], references: [id])

  executions         StepExecution[]

  @@unique([processTypeId, order])
  @@map("steps")
}

model ProcessInstance {
  id               String        @id @default(uuid())
  code             String        @unique
  title            String?
  description      String?
  status           ProcessStatus @default(IN_PROGRESS)
  currentStepOrder Int           @default(1)
  formData         Json?
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  completedAt      DateTime?

  processTypeId    String
  processType      ProcessType   @relation(fields: [processTypeId], references: [id])

  createdById      String
  createdBy        User          @relation(fields: [createdById], references: [id])

  companyId        String
  company          Company       @relation(fields: [companyId], references: [id])

  stepExecutions   StepExecution[]

  @@map("process_instances")
}

model StepExecution {
  id               String              @id @default(uuid())
  status           StepExecutionStatus @default(PENDING)
  action           String?
  comment          String?
  metadata         Json?
  signedAt         DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  completedAt      DateTime?

  processInstanceId String
  processInstance   ProcessInstance @relation(fields: [processInstanceId], references: [id])

  stepId            String
  step              Step @relation(fields: [stepId], references: [id])

  executorId        String?
  executor          User? @relation(fields: [executorId], references: [id])

  sectorId          String?
  sector            Sector? @relation(fields: [sectorId], references: [id])

  attachments       Attachment[]

  @@map("step_executions")
}

model Attachment {
  id                String   @id @default(uuid())
  filename          String
  originalName      String
  mimeType          String
  size              Int
  path              String
  isSigned          Boolean  @default(false)
  signedPath        String?
  signatureData     String?  // JSON
  createdAt         DateTime @default(now())

  stepExecutionId   String
  stepExecution     StepExecution @relation(fields: [stepExecutionId], references: [id], onDelete: Cascade)

  @@map("attachments")
}
