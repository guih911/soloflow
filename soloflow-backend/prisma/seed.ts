import { PrismaClient, UserRole, StepType } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  // Criar empresa padr√£o
  const company = await prisma.company.upsert({
    where: { cnpj: '00.000.000/0000-00' },
    update: {},
    create: {
      name: 'Empresa Demo',
      cnpj: '00.000.000/0000-00',
      email: 'contato@demo.com',
      phone: '(11) 99999-9999',
    },
  });

  // Criar setores
  const sectorRH = await prisma.sector.upsert({
    where: {
      companyId_name: {
        companyId: company.id,
        name: 'Recursos Humanos',
      },
    },
    update: {},
    create: {
      name: 'Recursos Humanos',
      description: 'Setor de RH',
      companyId: company.id,
    },
  });

  const sectorFinanceiro = await prisma.sector.upsert({
    where: {
      companyId_name: {
        companyId: company.id,
        name: 'Financeiro',
      },
    },
    update: {},
    create: {
      name: 'Financeiro',
      description: 'Setor Financeiro',
      companyId: company.id,
    },
  });

  const sectorTI = await prisma.sector.upsert({
    where: {
      companyId_name: {
        companyId: company.id,
        name: 'TI',
      },
    },
    update: {},
    create: {
      name: 'TI',
      description: 'Tecnologia da Informa√ß√£o',
      companyId: company.id,
    },
  });

  const sectorJuridico = await prisma.sector.upsert({
    where: {
      companyId_name: {
        companyId: company.id,
        name: 'Jur√≠dico',
      },
    },
    update: {},
    create: {
      name: 'Jur√≠dico',
      description: 'Departamento Jur√≠dico',
      companyId: company.id,
    },
  });

  // Criar usu√°rios
  const hashedPassword = await bcrypt.hash('admin123', 10);
  
  // Admin
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@demo.com' },
    update: {},
    create: {
      name: 'Administrador',
      email: 'admin@demo.com',
      password: hashedPassword,
    },
  });

  // Criar v√≠nculo do admin com a empresa
  await prisma.userCompany.upsert({
    where: {
      userId_companyId: {
        userId: adminUser.id,
        companyId: company.id,
      },
    },
    update: {},
    create: {
      userId: adminUser.id,
      companyId: company.id,
      role: UserRole.ADMIN,
      isDefault: true,
    },
  });

  // Manager RH
  const managerUser = await prisma.user.upsert({
    where: { email: 'gerente@demo.com' },
    update: {},
    create: {
      name: 'Gerente RH',
      email: 'gerente@demo.com',
      password: hashedPassword,
    },
  });

  await prisma.userCompany.upsert({
    where: {
      userId_companyId: {
        userId: managerUser.id,
        companyId: company.id,
      },
    },
    update: {},
    create: {
      userId: managerUser.id,
      companyId: company.id,
      sectorId: sectorRH.id,
      role: UserRole.MANAGER,
      isDefault: true,
    },
  });

  // User Financeiro
  const userFinanceiro = await prisma.user.upsert({
    where: { email: 'financeiro@demo.com' },
    update: {},
    create: {
      name: 'Analista Financeiro',
      email: 'financeiro@demo.com',
      password: hashedPassword,
    },
  });

  await prisma.userCompany.upsert({
    where: {
      userId_companyId: {
        userId: userFinanceiro.id,
        companyId: company.id,
      },
    },
    update: {},
    create: {
      userId: userFinanceiro.id,
      companyId: company.id,
      sectorId: sectorFinanceiro.id,
      role: UserRole.USER,
      isDefault: true,
    },
  });

  // User Jur√≠dico
  const userJuridico = await prisma.user.upsert({
    where: { email: 'juridico@demo.com' },
    update: {},
    create: {
      name: 'Analista Jur√≠dico',
      email: 'juridico@demo.com',
      password: hashedPassword,
    },
  });

  await prisma.userCompany.upsert({
    where: {
      userId_companyId: {
        userId: userJuridico.id,
        companyId: company.id,
      },
    },
    update: {},
    create: {
      userId: userJuridico.id,
      companyId: company.id,
      sectorId: sectorJuridico.id,
      role: UserRole.USER,
      isDefault: true,
    },
  });

  // ‚úÖ MELHORADO: Tipo de processo - Solicita√ß√£o de F√©rias com SLA e instru√ß√µes detalhadas
  const processTypeFerias = await prisma.processType.create({
    data: {
      name: 'Solicita√ß√£o de F√©rias',
      description: 'Processo completo para solicita√ß√£o de f√©rias dos colaboradores com controle de prazos',
      companyId: company.id,
      steps: {
        create: [
          {
            name: 'Preencher Solicita√ß√£o',
            description: 'Colaborador preenche os dados da solicita√ß√£o de f√©rias',
            instructions: `üìã INSTRU√á√ïES PARA PREENCHIMENTO:

‚Ä¢ Verifique seu saldo de f√©rias antes de solicitar
‚Ä¢ Informe as datas de in√≠cio e fim das f√©rias desejadas
‚Ä¢ Certifique-se de que n√£o h√° conflitos com projetos importantes
‚Ä¢ Anexe documentos se necess√°rio (atestados m√©dicos, etc.)
‚Ä¢ Confirme os dados antes de enviar

‚ö†Ô∏è ATEN√á√ÉO: Ap√≥s enviar, a solicita√ß√£o n√£o poder√° ser alterada. Em caso de erro, ser√° necess√°rio cancelar e criar nova solicita√ß√£o.`,
            slaHours: 24,
            type: StepType.INPUT,
            order: 1,
            allowAttachment: true,
            requiresSignature: false,
            actions: ['enviar'],
          },
          {
            name: 'Aprova√ß√£o do Gestor Direto',
            description: 'Gestor imediato analisa e aprova/rejeita a solicita√ß√£o',
            instructions: `üîç CRIT√âRIOS PARA AN√ÅLISE:

‚Ä¢ Verificar se as datas n√£o conflitam com entregas importantes
‚Ä¢ Confirmar se o colaborador possui saldo de f√©rias suficiente
‚Ä¢ Avaliar impacto na equipe e projetos em andamento
‚Ä¢ Verificar se h√° cobertura adequada durante o per√≠odo
‚Ä¢ Consultar cronograma de f√©rias da equipe

‚úÖ APROVA√á√ÉO: Quando todos os crit√©rios est√£o atendidos
‚ùå REJEI√á√ÉO: Quando h√° impedimentos justific√°veis (sempre informar motivo no coment√°rio)`,
            slaHours: 48,
            type: StepType.APPROVAL,
            order: 2,
            allowAttachment: true,
            requiresSignature: false,
            actions: ['aprovar', 'rejeitar'],
            assignedToSectorId: sectorRH.id,
            conditions: {
              aprovar: 3,
              rejeitar: 'END'
            },
          },
          {
            name: 'Valida√ß√£o Final RH',
            description: 'RH valida disponibilidade final e processa a solicita√ß√£o',
            instructions: `üìä VALIDA√á√ïES OBRIGAT√ìRIAS DO RH:

‚Ä¢ Confirmar saldo de f√©rias no sistema
‚Ä¢ Verificar cumprimento da legisla√ß√£o trabalhista
‚Ä¢ Validar per√≠odo aquisitivo e vencimentos
‚Ä¢ Atualizar cronograma geral de f√©rias
‚Ä¢ Verificar documenta√ß√£o anexada

üìù PROCESSOS ADMINISTRATIVOS:
‚Ä¢ Gerar termo de f√©rias para assinatura
‚Ä¢ Atualizar sistema de ponto/frequ√™ncia
‚Ä¢ Comunicar setores relacionados (TI, Seguran√ßa, etc.)
‚Ä¢ Arquivar documenta√ß√£o no prontu√°rio

‚ö° URG√äNCIA: Esta etapa deve ser conclu√≠da rapidamente para garantir o planejamento do colaborador.`,
            slaHours: 72,
            type: StepType.REVIEW,
            order: 3,
            allowAttachment: true,
            requiresSignature: true,
            actions: ['aprovar', 'devolver'],
            assignedToSectorId: sectorRH.id,
          },
        ],
      },
    },
  });

  // ‚úÖ NOVO: Tipo de processo - Solicita√ß√£o de Compra com m√∫ltiplos tipos de etapa e SLAs diferenciados
  const processTypeCompra = await prisma.processType.create({
    data: {
      name: 'Solicita√ß√£o de Compra',
      description: 'Processo completo de aquisi√ß√£o com cota√ß√µes, aprova√ß√µes e contratos',
      companyId: company.id,
      formFields: {
        create: [
          {
            name: 'descricao_item',
            label: 'Descri√ß√£o do Item',
            type: 'TEXT',
            required: true,
            order: 1,
            placeholder: 'Descreva detalhadamente o item a ser comprado',
          },
          {
            name: 'quantidade',
            label: 'Quantidade',
            type: 'NUMBER',
            required: true,
            order: 2,
            validations: {
              min: 1,
              max: 9999,
            },
          },
          {
            name: 'valor_estimado',
            label: 'Valor Estimado',
            type: 'CURRENCY',
            required: true,
            order: 3,
            placeholder: '0.00',
          },
          {
            name: 'justificativa',
            label: 'Justificativa Comercial',
            type: 'TEXTAREA',
            required: true,
            order: 4,
            placeholder: 'Explique a necessidade comercial e impacto da compra',
          },
          {
            name: 'urgencia',
            label: 'N√≠vel de Urg√™ncia',
            type: 'DROPDOWN',
            required: true,
            order: 5,
            options: [
              { value: 'baixa', label: 'Baixa - At√© 30 dias' },
              { value: 'media', label: 'M√©dia - At√© 15 dias' },
              { value: 'alta', label: 'Alta - At√© 7 dias' },
              { value: 'urgente', label: 'Urgente - At√© 3 dias' },
            ],
          },
          {
            name: 'especificacoes',
            label: 'Especifica√ß√µes T√©cnicas',
            type: 'FILE',
            required: false,
            order: 6,
            placeholder: 'Anexe especifica√ß√µes t√©cnicas se necess√°rio',
            validations: {
              maxFiles: 3,
              allowedTypes: ['.pdf', '.doc', '.docx'],
              maxSize: 5242880 // 5MB
            }
          },
        ],
      },
      steps: {
        create: [
          {
            name: 'Cria√ß√£o da Solicita√ß√£o',
            description: 'Solicitante preenche dados detalhados da compra',
            instructions: `üìù PREENCHIMENTO DA SOLICITA√á√ÉO:

‚Ä¢ Seja espec√≠fico na descri√ß√£o do item (marca, modelo, caracter√≠sticas)
‚Ä¢ Pesquise valores de refer√™ncia no mercado
‚Ä¢ Justifique claramente a necessidade do neg√≥cio
‚Ä¢ Defina prazo realista conforme urg√™ncia
‚Ä¢ Anexe especifica√ß√µes t√©cnicas quando aplic√°vel

üí° DICAS IMPORTANTES:
‚Ä¢ Solicita√ß√µes bem detalhadas aceleram o processo
‚Ä¢ Valores estimados ajudam na negocia√ß√£o
‚Ä¢ Justificativas s√≥lidas facilitam aprova√ß√µes`,
            slaHours: 12,
            type: StepType.INPUT,
            order: 1,
            allowAttachment: true,
            requiresSignature: false,
            actions: ['enviar'],
          },
          {
            name: 'Coleta de Cota√ß√µes',
            description: 'Financeiro busca cota√ß√µes de fornecedores',
            instructions: `üí∞ PROCESSO DE COTA√á√ÉO:

üìã OBRIGAT√ìRIO:
‚Ä¢ Obter m√≠nimo 3 cota√ß√µes de fornecedores diferentes
‚Ä¢ Verificar idoneidade dos fornecedores (CNPJ ativo, certid√µes)
‚Ä¢ Comparar pre√ßos, prazos e condi√ß√µes de pagamento
‚Ä¢ Negociar melhores condi√ß√µes quando poss√≠vel

üìé DOCUMENTA√á√ÉO NECESS√ÅRIA:
‚Ä¢ Salvar cota√ß√µes em PDF
‚Ä¢ Preencher planilha comparativa
‚Ä¢ Verificar garantias e assist√™ncia t√©cnica
‚Ä¢ Documentar observa√ß√µes sobre cada fornecedor

‚è∞ PRAZO CR√çTICO: Este processo define a viabilidade econ√¥mica da compra.`,
            slaHours: 120, // 5 dias √∫teis
            type: StepType.UPLOAD,
            order: 2,
            allowAttachment: true,
            requireAttachment: true,
            minAttachments: 3,
            requiresSignature: false,
            actions: ['enviar'],
            assignedToUserId: userFinanceiro.id,
          },
          {
            name: 'Aprova√ß√£o Financeira',
            description: 'An√°lise e aprova√ß√£o or√ßament√°ria',
            instructions: `üíº AN√ÅLISE FINANCEIRA COMPLETA:

üîç VERIFICA√á√ïES OBRIGAT√ìRIAS:
‚Ä¢ Confirmar disponibilidade or√ßament√°ria
‚Ä¢ Analisar custo-benef√≠cio das op√ß√µes
‚Ä¢ Verificar conformidade com pol√≠ticas de compras
‚Ä¢ Avaliar impacto no fluxo de caixa

üìä CRIT√âRIOS DE APROVA√á√ÉO:
‚Ä¢ Valor dentro do or√ßamento aprovado
‚Ä¢ Fornecedor com menor pre√ßo E melhor condi√ß√£o
‚Ä¢ Prazo de entrega compat√≠vel com necessidade
‚Ä¢ Garantias adequadas ao tipo de produto

‚ö†Ô∏è EM CASO DE REJEI√á√ÉO: Informar claramente os motivos e sugerir alternativas.`,
            slaHours: 24,
            type: StepType.APPROVAL,
            order: 3,
            allowAttachment: true,
            requiresSignature: false,
            actions: ['aprovar', 'rejeitar', 'solicitar_revisao'],
            assignedToSectorId: sectorFinanceiro.id,
            conditions: {
              aprovar: 4,
              rejeitar: 'END',
              solicitar_revisao: 2
            },
          },
          {
            name: 'Revis√£o Jur√≠dica',
            description: 'An√°lise de contratos e aspectos legais',
            instructions: `‚öñÔ∏è AN√ÅLISE JUR√çDICA DETALHADA:

üìã DOCUMENTOS PARA REVIS√ÉO:
‚Ä¢ Contrato ou proposta comercial
‚Ä¢ Termos e condi√ß√µes de fornecimento
‚Ä¢ Cl√°usulas de garantia e assist√™ncia
‚Ä¢ Condi√ß√µes de pagamento e penalidades

üîç PONTOS DE ATEN√á√ÉO:
‚Ä¢ Verificar cl√°usulas abusivas ou desequilibradas
‚Ä¢ Confirmar adequa√ß√£o √† legisla√ß√£o vigente
‚Ä¢ Analisar responsabilidades de cada parte
‚Ä¢ Validar foro e legisla√ß√£o aplic√°vel

‚úÖ APROVA√á√ÉO FINAL: Confirma que todos os aspectos legais est√£o adequados e o contrato pode ser assinado.`,
            slaHours: 48,
            type: StepType.REVIEW,
            order: 4,
            allowAttachment: true,
            requiresSignature: true,
            actions: ['aprovar', 'solicitar_ajustes'],
            assignedToSectorId: sectorJuridico.id,
            conditions: {
              aprovar: 5,
              solicitar_ajustes: 3
            },
          },
          {
            name: 'Assinatura do Contrato',
            description: 'Assinatura digital do contrato final',
            instructions: `‚úçÔ∏è ASSINATURA DIGITAL DO CONTRATO:

üìÑ DOCUMENTO FINAL:
‚Ä¢ Revisar todos os termos antes de assinar
‚Ä¢ Verificar dados das partes (CNPJ, endere√ßos)
‚Ä¢ Confirmar valores, prazos e condi√ß√µes
‚Ä¢ Validar anexos e especifica√ß√µes t√©cnicas

üîê PROCESSO DE ASSINATURA:
‚Ä¢ Utilizar certificado digital v√°lido
‚Ä¢ Verificar integridade do documento
‚Ä¢ Salvar c√≥pia assinada em local seguro
‚Ä¢ Comunicar conclus√£o aos interessados

‚úÖ CONCLUS√ÉO: Ap√≥s assinatura, o processo est√° finalizado e a compra autorizada.`,
            slaHours: 24,
            type: StepType.SIGNATURE,
            order: 5,
            allowAttachment: true,
            requireAttachment: true,
            requiresSignature: true,
            actions: ['assinar', 'solicitar_correcao'],
            assignedToUserId: adminUser.id,
            conditions: {
              assinar: 'END',
              solicitar_correcao: 4
            },
          },
        ],
      },
    },
  });

  // ‚úÖ NOVO: Processo simples para demonstrar diferentes tipos de etapa
  const processTypeOnboarding = await prisma.processType.create({
    data: {
      name: 'Onboarding de Funcion√°rio',
      description: 'Processo de integra√ß√£o de novos colaboradores',
      companyId: company.id,
      formFields: {
        create: [
          {
            name: 'nome_funcionario',
            label: 'Nome Completo',
            type: 'TEXT',
            required: true,
            order: 1,
          },
          {
            name: 'cargo',
            label: 'Cargo',
            type: 'TEXT',
            required: true,
            order: 2,
          },
          {
            name: 'setor',
            label: 'Setor',
            type: 'DROPDOWN',
            required: true,
            order: 3,
            options: [
              { value: 'rh', label: 'Recursos Humanos' },
              { value: 'ti', label: 'Tecnologia' },
              { value: 'financeiro', label: 'Financeiro' },
              { value: 'juridico', label: 'Jur√≠dico' },
            ],
          },
          {
            name: 'data_inicio',
            label: 'Data de In√≠cio',
            type: 'DATE',
            required: true,
            order: 4,
          },
        ],
      },
      steps: {
        create: [
          {
            name: 'Cadastro de Dados',
            description: 'RH registra informa√ß√µes b√°sicas do novo funcion√°rio',
            instructions: `üë§ CADASTRO DE NOVO FUNCION√ÅRIO:

üìã DADOS OBRIGAT√ìRIOS:
‚Ä¢ Nome completo conforme documentos
‚Ä¢ Cargo exato conforme contrata√ß√£o
‚Ä¢ Setor de lota√ß√£o
‚Ä¢ Data de in√≠cio das atividades

‚ö†Ô∏è IMPORTANTE: Dados incorretos podem gerar problemas trabalhistas e administrativos.`,
            slaHours: 4,
            type: StepType.INPUT,
            order: 1,
            actions: ['cadastrar'],
            assignedToSectorId: sectorRH.id,
          },
          {
            name: 'Prepara√ß√£o do Ambiente',
            description: 'TI configura equipamentos e acessos',
            instructions: `üíª SETUP TECNOL√ìGICO:

üîß CONFIGURA√á√ïES NECESS√ÅRIAS:
‚Ä¢ Criar usu√°rio de rede corporativa
‚Ä¢ Configurar e-mail institucional
‚Ä¢ Instalar softwares necess√°rios ao cargo
‚Ä¢ Preparar equipamentos (notebook, celular, etc.)
‚Ä¢ Configurar acessos aos sistemas corporativos

üì± ENTREGA DE EQUIPAMENTOS:
‚Ä¢ Notebook com softwares instalados
‚Ä¢ Celular corporativo (se aplic√°vel)
‚Ä¢ Acess√≥rios necess√°rios (mouse, fone, etc.)

‚è∞ PRAZO: Equipamentos devem estar prontos antes do primeiro dia de trabalho.`,
            slaHours: 48,
            type: StepType.UPLOAD,
            order: 2,
            allowAttachment: true,
            actions: ['configurar'],
            assignedToSectorId: sectorTI.id,
          },
          {
            name: 'Entrega de Documentos',
            description: 'Funcion√°rio entrega documenta√ß√£o pessoal',
            instructions: `üìÑ DOCUMENTA√á√ÉO PESSOAL OBRIGAT√ìRIA:

üÜî DOCUMENTOS DE IDENTIDADE:
‚Ä¢ RG e CPF (c√≥pia autenticada)
‚Ä¢ Carteira de Trabalho
‚Ä¢ T√≠tulo de Eleitor
‚Ä¢ Certificado de Reservista (se aplic√°vel)

üè† COMPROVANTES:
‚Ä¢ Comprovante de resid√™ncia atualizado
‚Ä¢ Comprovante de escolaridade
‚Ä¢ Certid√£o de nascimento/casamento

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ DEPENDENTES (se houver):
‚Ä¢ Certid√£o de nascimento dos filhos
‚Ä¢ Cart√£o de vacina√ß√£o (menores de 14 anos)
‚Ä¢ Comprovante de matr√≠cula escolar

üìã OBSERVA√á√ïES: Todos os documentos devem ser leg√≠veis e dentro da validade.`,
            slaHours: 8,
            type: StepType.UPLOAD,
            order: 3,
            allowAttachment: true,
            requireAttachment: true,
            minAttachments: 5,
            actions: ['entregar'],
          },
          {
            name: 'Aprova√ß√£o Final',
            description: 'Gestor aprova conclus√£o do onboarding',
            instructions: `‚úÖ VALIDA√á√ÉO FINAL DO ONBOARDING:

üîç VERIFICA√á√ïES FINAIS:
‚Ä¢ Confirmar que todos os equipamentos foram entregues
‚Ä¢ Validar que documenta√ß√£o est√° completa
‚Ä¢ Verificar cria√ß√£o de acessos e e-mail
‚Ä¢ Confirmar prepara√ß√£o do ambiente de trabalho

üë• INTEGRA√á√ÉO DA EQUIPE:
‚Ä¢ Apresentar novo funcion√°rio √† equipe
‚Ä¢ Explicar din√¢mica de trabalho
‚Ä¢ Definir agenda da primeira semana
‚Ä¢ Agendar follow-ups de acompanhamento

üìä APROVA√á√ÉO: Confirma que o funcion√°rio est√° pronto para iniciar atividades produtivas.`,
            slaHours: 4,
            type: StepType.APPROVAL,
            order: 4,
            actions: ['aprovar', 'solicitar_pendencias'],
            assignedToSectorId: sectorRH.id,
          },
        ],
      },
    },
  });

  console.log('‚úÖ Seed executado com sucesso!');
  console.log('');
  console.log('üë• USU√ÅRIOS CRIADOS:');
  console.log('‚Ä¢ admin@demo.com (senha: admin123) - Administrador');
  console.log('‚Ä¢ gerente@demo.com (senha: admin123) - Gerente RH');
  console.log('‚Ä¢ financeiro@demo.com (senha: admin123) - Analista Financeiro');
  console.log('‚Ä¢ juridico@demo.com (senha: admin123) - Analista Jur√≠dico');
  console.log('');
  console.log('üè¢ SETORES CRIADOS:');
  console.log('‚Ä¢ Recursos Humanos');
  console.log('‚Ä¢ Financeiro');
  console.log('‚Ä¢ TI');
  console.log('‚Ä¢ Jur√≠dico');
  console.log('');
  console.log('üìã TIPOS DE PROCESSO CRIADOS:');
  console.log('‚Ä¢ Solicita√ß√£o de F√©rias (3 etapas com SLA e instru√ß√µes)');
  console.log('‚Ä¢ Solicita√ß√£o de Compra (5 etapas com todos os tipos)');
  console.log('‚Ä¢ Onboarding de Funcion√°rio (4 etapas demonstrativas)');
  console.log('');
  console.log('üöÄ Sistema pronto para uso!');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });